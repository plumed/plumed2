#! /usr/bin/env bash

if test -z "$GIT_TOKEN" ; then
  echo "No GIT_TOKEN, cannot push"
  exit 0
fi

WHAT=$1

case "$WHAT" in
(doc) echo "Pushing documentation" ;;
(coverage) echo "Pushing coverage" ;;
(*) echo "ERROR!!"
    exit 1
esac

set -e
set -x

BRANCH=""
PULL_REQUEST=false

if test "$TRAVIS" == true ; then
  BRANCH="$TRAVIS_BRANCH"
  GIT_OWNER=$(  echo $TRAVIS_REPO_SLUG | sed "s/\/.*$//" )
  GIT_REPO=$(   echo $TRAVIS_REPO_SLUG | sed "s/^.*\///" )
  PULL_REQUEST="$TRAVIS_PULL_REQUEST"
fi

if test "$GITHUB_ACTIONS" == true ; then
  if [[ "$GITHUB_REF" == "refs/heads/"* ]] ; then
    BRANCH="${GITHUB_REF#refs/heads/}"
  fi
  GIT_OWNER=$(  echo $GITHUB_REPOSITORY | sed "s/\/.*$//" )
  GIT_REPO=$(   echo $GITHUB_REPOSITORY | sed "s/^.*\///" )
  if test -n "$GITHUB_BASE_REF" ; then
    PULL_REQUEST=true
  fi
fi

if test -z "$BRANCH" ; then
  echo "Not building from a branch, nothing to push"
  exit 0
fi

if [ "$PULL_REQUEST" != false ] ; then
  echo "Building from a pull request, nothing to push"
  exit 0
fi

if [ "$GIT_OWNER" = plumed ] ; then
  if [[ "$BRANCH" =~ ^v2\.[0-9]+$ ]] ; then
    if test -f CHANGES/"$BRANCH".md && grep -q plumednotmaintained CHANGES/"$BRANCH".md ; then
      branchtype=unsupported
    else
      branchtype=official
    fi
  elif [ "$BRANCH" = master ] ; then
    branchtype=master
  else
    branchtype=unofficial
  fi
else 
  branchtype=unofficial
fi

hash=$( git log -1 --format="%h")

root="$PWD"
mkdir -p tmp/$$
cd tmp/$$


case "$WHAT" in
(doc)
# grab doc
  mkdir user-doc
  cp -R $root/new-manual/site/ user-doc/html
  test -d $root/user-doc/regtests && cp -R $root/user-doc/regtests user-doc/ || true
  mkdir developer-doc
  cp -R $root/developer-doc/html developer-doc/
;;
(coverage)
  cp -R $root/developer-doc/coverage .
  cp -R $root/developer-doc/coverage-libs .
esac


# This file should be here, it is needed otherwise
# files beginning with _ are skipped
touch .nojekyll

case "$WHAT" in
(doc)
cat > index.html << EOF
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<head>
<title>Page Auto Redirect</title>
<meta http-equiv="refresh" content ="0; user-doc/html/index.html">
</head>
<body>
This is an auto redirect page.
</body>
</html>
EOF
  ;;
(coverage)
cat > index.html << EOF
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
<body>
<title> Coverage scan </title>
<h1> Coverage scan </h1>
Here you can find coverage scan reports for PLUMED:
<ul>
  <li><a href=coverage/index.html>Standard coverage (excluding libraries)</a></li>
  <li><a href=coverage-libs/index.html>Coverage for third-party libraries</a></li>
</ul>
The first one is equivalent to the one you will find on <a href="https://codecov.io/gh/$GIT_OWNER/$GIT_REPO">CodeCov</a> (if enabled).
The second one only contains third-party libraries included in PLUMED.
</body>
</html>
EOF
  ;;
esac


if test -z "${GIT_BOT}"
then
  export GIT_BOT=plumedbot
fi

if test -z "${GIT_BOT_EMAIL}"
then
  export GIT_BOT_EMAIL=giovanni.bussi+plumedbot@gmail.com
fi

git init
git config user.email "${GIT_BOT_EMAIL}"
git config user.name "${GIT_BOT}"
git checkout -b gh-pages
# this is not to show the GIT_TOKEN on Travis log
set +x
git remote add doc https://${GIT_BOT}:$GIT_TOKEN@github.com/$GIT_OWNER/${WHAT}-${BRANCH}.git
set -x

case "$WHAT" in
(doc)
cat > README.md << EOF
Precompiled manual for PLUMED ${BRANCH}
-----------------------------

This repository hosts a precompiled manual for [PLUMED](http://www.plumed.org) ${BRANCH},
git revision [$hash](https://github.com/${GIT_OWNER}/${GIT_REPO}/commit/$hash).

To browse the manual you should go [here](http://${GIT_OWNER}.github.io/${WHAT}-${BRANCH}).

You can also download a full copy of the manual for offline access
at [this link](http://github.com/${GIT_OWNER}/${WHAT}-${BRANCH}/archive/gh-pages.zip).

This manual has been compiled on [GiHub actions](http://github.com/${GIT_OWNER}/${GIT_REPO}/actions) on $(date).

EOF

case "$branchtype" in
(official)    echo "This is the manual for an official and supported PLUMED branch." >> README.md ;;
(unsupported) echo "This is the manual for an official but unsupported PLUMED branch. It will not appear on search engines." >> README.md ;;
(master)      echo "This is the manual for the development PLUMED branch." >> README.md ;;
(unofficial)  echo "This is the manual for an unofficial PLUMED branch. It will not appear on search engines." >> README.md ;;
esac
;;

(coverage)
cat > README.md << EOF
Coverage scan for PLUMED ${BRANCH}
-----------------------------

This repository hosts the coverage scan for [PLUMED](http://www.plumed.org) ${BRANCH},
git revision [$hash](https://github.com/${GIT_OWNER}/${GIT_REPO}/commit/$hash).

Coverage scan done on [GiHub actions](http://github.com/${GIT_OWNER}/${GIT_REPO}/actions) on $(date).

To browse the scan you should go [here](http://${GIT_OWNER}.github.io/${WHAT}-${BRANCH}).

You can also download a full copy of the scan for offline access
at [this link](http://github.com/${GIT_OWNER}/${WHAT}-${BRANCH}/archive/gh-pages.zip).
EOF
esac

case "$branchtype" in
(unsupported|unofficial|master)
# this is to avoid a huge log file:
set +x
  for file in $(find . -name "*.html") ; do
    awk '{
      if(done){print; next;}
      print
      if(match($0,".*<head>.*")){
        print "<meta name=\"robots\" content=\"noindex\">"
        done=1;
      }
    }END{
    if(!done) print "error: head not present in " FILENAME > "/dev/stderr"
    }' $file > $$
    mv $$ $file
done
set -x
esac

git add --all .
# >/dev/null to avoid excessive noise on travis log
git commit -m "Update to ${GIT_OWNER}/${GIT_REPO}@$hash" >/dev/null
# -q and 2> is not to show the GIT_TOKEN on Travis log
git push -q -f doc gh-pages 2> /dev/null || {
  echo "++++ WARNING ++++"
  echo "Pushing on repository https://${GIT_BOT}@github.com/$GIT_OWNER/doc-${BRANCH}.git failed"
  echo "Please check if the repository exists"
  if [[ "$branchtype" != unofficial ]] ; then
     echo "This is an error on official, unsupported, and master branches"
     exit 1
  fi
}
