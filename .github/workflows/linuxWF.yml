name: linuxCI

on:
  workflow_call:

env:
# on CI, better dump stack trace in case there is an error
  PLUMED_STACK_TRACE: yes
# use two threads for openMP tests
  PLUMED_NUM_THREADS: 2
# these are used to build required packages
  CC: gcc
  CXX: g++

jobs:
  linux:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        variant:
        # - -doc-mpi-
        # - -mpi-
        # - -coverage-mpi-
        # - -debug-
        # - -debug-mpi-
# temporarily commented out
# see https://github.com/plumed/plumed2/issues/976
        # - -intel-
        # - -pycv-mpi-
#this does not install mpi but uses the internal one
        - -nvhpc-
    steps:
    - uses: actions/checkout@v4
    - uses: actions/cache@v4
      with:
        path: ~/.ccache
        key: ccache-reset1-linux${{ matrix.variant }}hash-${{ github.sha }}
        restore-keys: ccache-reset1-linux${{ matrix.variant }}hash-
    - name: Removed unused stuff
      run: |
        df -h
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        df -h
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.9
    - name: Set paths
      run: |
        echo "$HOME/opt/bin" >> $GITHUB_PATH
        # path required for pytest:
        echo "$HOME/.local/bin" >> $GITHUB_PATH
        echo "PYTHONPATH=$HOME/opt/lib/plumed/python:$PYTHONPATH" >> $GITHUB_ENV
        echo "CPATH=$HOME/opt/include:$CPATH" >> $GITHUB_ENV
        echo "INCLUDE=$HOME/opt/include:$INCLUDE" >> $GITHUB_ENV
        echo "LIBRARY_PATH=$HOME/opt/lib:$LIBRARY_PATH" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$HOME/opt/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
    - name: Install generic packages
      run: |
        sudo apt-get update -qq
        sudo apt-get install -y libatlas-base-dev
        sudo apt-get install -y libfftw3-dev
        sudo apt-get install -y gsl-bin
        sudo apt-get install -y libgsl0-dev
        sudo apt-get install -y ccache
    - name: Install system boost
      if: ${{ ! contains( matrix.variant, '-debug-' ) }}
      run: |
        sudo apt-get install -y libboost-serialization-dev
    - name: Install boost with debug flags
      if: contains( matrix.variant, '-debug-' )
      run: |
        .ci/install.boost
    - name: Install python packages needed for tests
      run: |
        python -m pip install --upgrade pip
        pip install --user --extra-index-url=https://download.pytorch.org/whl/cpu \
              Cython \
              numpy \
              pytest \
              six \
              pandas \
              mdtraj \
              MDAnalysis \
              "torch>=2.7" \
              "metatomic-torch>=0.1,<0.2" \
              "featomic-torch==0.7.0"

        # torch 2.7 above is the first one to use cxx11 ABI for the PyPI wheels

    - name: Configure libmetatomic & libtorch
      if: ${{ ! contains( matrix.variant, '-debug-' ) }} # the libraries on PyPI are not compiled with GLIBCXX_DEBUG
      run: |
        PIP_CPPFLAGS=$(python src/metatomic/flags-from-python.py --cppflags)
        PIP_LDFLAGS=$(python src/metatomic/flags-from-python.py --ldflags)

        echo "LDFLAGS=$PIP_LDFLAGS $LDFLAGS" >> $GITHUB_ENV
        echo "CPPFLAGS=$PIP_CPPFLAGS $CPPFLAGS" >> $GITHUB_ENV

        # the flags above enable the use of both libmetatomic and libtorch
        echo "PLUMED_CONFIG=$PLUMED_CONFIG --enable-libmetatomic --enable-libtorch" >> $GITHUB_ENV
    - name: Install Doxygen
      if: contains( matrix.variant, '-doc-' )
      run: |
        pip install requests
        pip install PlumedToHTML
        pip install networkx
        pip install mkdocs-material
        pip install python-markdown-math
        sudo apt-get install -y graphviz
        sudo apt-get install -y doxygen-latex
        .ci/install.doxygen Release_1_13_2
        echo "PLUMED_CONFIG=$PLUMED_CONFIG --enable-pdfdoc" >> $GITHUB_ENV
        # make sure all tests are run
        echo "PLUMED_ALL_TESTS=yes" >> $GITHUB_ENV
    - name: Install lcov
      if: contains( matrix.variant, '-coverage-' )
      run: |
        .ci/install.lcov v1.16
        echo "PLUMED_CONFIG=$PLUMED_CONFIG --disable-external-lapack --disable-external-blas --enable-gcov CXXFLAGS=-O" >> $GITHUB_ENV
        # make sure all tests are run
        echo "PLUMED_ALL_TESTS=yes" >> $GITHUB_ENV
    - name: Setup debug flags
      if: contains( matrix.variant, '-debug-' )
      run: |
        echo "PLUMED_CONFIG=$PLUMED_CONFIG --enable-debug --enable-debug-glibcxx" >> $GITHUB_ENV
    - name: Install INTEL compiler
      # install INTEL at last since it modifies CC and CXX
      if: contains( matrix.variant, '-intel-' )
      run: |
        wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
        sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
        rm GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB
        #wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        #sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        #rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
        echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
        sudo apt-get update
        #sudo apt-get install intel-oneapi-compiler-dpcpp-cpp-and-cpp-classic intel-oneapi-mkl intel-oneapi-mkl-devel intel-oneapi-compiler-fortran
        sudo apt-get install intel-basekit intel-hpckit
        source /opt/intel/oneapi/setvars.sh
        printenv >> $GITHUB_ENV
        echo "CXX=icpx" >> $GITHUB_ENV
        echo "CC=icx" >> $GITHUB_ENV
        echo "FC=ifx" >> $GITHUB_ENV
    - name: Install NVHPC compiler
      if: contains( matrix.variant, '-nvhpc-' )
      # use this if it does not work
      # wget https://developer.download.nvidia.com/hpc-sdk/24.3/nvhpc_2024_243_Linux_x86_64_cuda_12.3.tar.gz
      # tar xpzf nvhpc_2024_243_Linux_x86_64_cuda_12.3.tar.gz
      # nvhpc_2024_243_Linux_x86_64_cuda_12.3/install
      run: |
        curl https://developer.download.nvidia.com/hpc-sdk/ubuntu/DEB-GPG-KEY-NVIDIA-HPC-SDK | sudo gpg --dearmor -o /usr/share/keyrings/nvidia-hpcsdk-archive-keyring.gpg
        echo 'deb [signed-by=/usr/share/keyrings/nvidia-hpcsdk-archive-keyring.gpg] https://developer.download.nvidia.com/hpc-sdk/ubuntu/amd64 /' | sudo tee /etc/apt/sources.list.d/nvhpc.list
        sudo apt-get update -y
        sudo apt-get install -y nvhpc-24-3
        NVHOME=/opt/nvidia/hpc_sdk
        NVARCH=`uname -s`_`uname -m`
        # echo "NVHPC=$NVHOME" >> $GITHUB_ENV
        # echo "NVHPC_ROOT=$NVHOME/$NVARCH/24.3" >> $GITHUB_ENV
        nvcudadir=$NVHOME/$NVARCH/24.3/cuda
        nvcompdir=$NVHOME/$NVARCH/24.3/compilers
        nvmathdir=$NVHOME/$NVARCH/24.3/math_libs
        nvcommdir=$NVHOME/$NVARCH/24.3/comm_libs

        echo "PATH=$nvcudadir/bin:$nvcompdir/bin:$nvcommdir/mpi/bin:$nvcompdir/extras/qd/bin:$PATH" >> $GITHUB_ENV
        # echo "LD_LIBRARY_PATH=$nvcudadir/lib64:$nvcudadir/12.3/targets/x86_64-linux/lib/stubs/:$nvcudadir/extras/CUPTI/lib64:$nvcompdir/extras/qd/lib:$nvcompdir/lib:$nvmathdir/lib64:$nvcommdir/nccl/lib:$nvcommdir/nvshmem/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        # echo "CPATH=$nvmathdir/include:$nvcommdir/nccl/include:$nvcommdir/nvshmem/include:$nvcompdir/extras/qd/include/qd:$CPATH" >> $GITHUB_ENV
        # echo "NVHPC_CUDA_HOME=$nvcudadir/12.3" >> $GITHUB_ENV

        #uncomment to try to use MPI
        # echo "CXX=$nvcommdir/mpi/bin/mpic++" >> $GITHUB_ENV
        # echo "CC=$nvcommdir/mpi/bin/mpicc" >> $GITHUB_ENV
        # echo "FC=$nvcommdir/mpi/bin/mpif90" >> $GITHUB_ENV

        $nvcompdir/bin/nvc++ -help -gpu
        echo "CXX=$nvcompdir/bin/nvc++" >> $GITHUB_ENV
        echo "CC=$nvcompdir/bin/nvc" >> $GITHUB_ENV
        echo "FC=$nvcompdir/bin/nvfortran" >> $GITHUB_ENV

        echo "Testing (at least the compilation) with openacc, discarding membranefusion due to some incompatibilities with nvhpc"
        echo "PLUMED_CONFIG=$PLUMED_CONFIG --enable-openacc PLUMED_ACC_TYPE=gpu PLUMED_ACC_GPU=cc80 --enable-modules=all:-membranefusion:-ves:-isdb" >> $GITHUB_ENV
                
        # Using the same environment variables as the plain mpi installation
        echo "OMPI_MCA_btl_base_warn_component_unused=0" >> $GITHUB_ENV
        echo "OMPI_MCA_btl_base_verbose=0" >> $GITHUB_ENV
        echo "OMPI_MCA_plm=isolated" >> $GITHUB_ENV
        echo "OMPI_MCA_btl_vader_single_copy_mechanism=none" >> $GITHUB_ENV
        echo "OMPI_MCA_rmaps_base_oversubscribe=yes" >> $GITHUB_ENV
        echo "PLUMED_CXXFLAGS=-O3 -Minfo=all" >> $GITHUB_ENV
      # nvhpcinstalls his own mpi compilers
    - name: Install MPI
      # install MPI at last since it modifies CC and CXX
      if: contains( matrix.variant, '-mpi-' )
      run: |
        sudo apt-get install -y libopenmpi-dev openmpi-bin
        echo "CC=mpicc" >> $GITHUB_ENV
        echo "CXX=mpic++" >> $GITHUB_ENV
        echo "OMPI_MCA_btl_base_warn_component_unused=0" >> $GITHUB_ENV
        echo "OMPI_MCA_btl_base_verbose=0" >> $GITHUB_ENV
        echo "OMPI_MCA_plm=isolated" >> $GITHUB_ENV
        echo "OMPI_MCA_btl_vader_single_copy_mechanism=none" >> $GITHUB_ENV
        echo "OMPI_MCA_rmaps_base_oversubscribe=yes" >> $GITHUB_ENV
        pip install --user mpi4py
        python -c "import mpi4py"
    - name: Config PLUMED
      id: config
      run: |
        ccache -s -M 100M
        if [[ -n $PLUMED_CXXFLAGS ]]; then
          PLUMED_CXXFLAGS_KEY="CXXFLAGS="
        fi
        #removed LDFLAGS=-Wl,-rpath,$LD_LIBRARY_PATH
        ./configure CXX="ccache $CXX" --enable-boost_serialization --disable-dependency-tracking --enable-modules=all $PLUMED_CONFIG $PLUMED_CXXFLAGS_KEY"$PLUMED_CXXFLAGS" --prefix="$HOME/opt"
        ccache -s -M 100M
    - name: Config Log
      if: failure() && steps.config.outcome == 'failure'
      run: cat config.log

    - name: Build PLUMED
      run: |
        ccache -s -M 100M
        make -j 4
        make install
        # check for global symbols, see https://github.com/plumed/plumed2/issues/549
        make nmcheck
        ccache -s -M 100M

    - name: Run tests
      if: ${{ ! contains( matrix.variant, '-doc-mpi-' ) && ! contains( matrix.variant, '-pycv-mpi-' ) }}
      run: |
         (while true; do  # see https://github.com/actions/virtual-environments/issues/1860
              df -h
              sleep 15
              done) &
         make --no-print-directory -C regtest testclean
         # these can fail for numerical reasons
         make -C regtest checkfail
    - name: Run python tests
      run: |
         cd python
         pytest -v
    - name: Build doc
      env:
        GIT_TOKEN: ${{ secrets.GIT_TOKEN_PLUMEDBOT }}
      if: contains( matrix.variant, '-doc-' )
      run: |
         export PLUMED_MAXBACKUP=0 
         make doc >/dev/null
    - name: Coverage
      env:
        GIT_TOKEN: ${{ secrets.GIT_TOKEN_PLUMEDBOT }}
      if: contains( matrix.variant, '-coverage-' )
      run: |
         make -C developer-doc coverage
         .ci/push coverage
         # this is hanging for some reason now (2024-04-03) - GB
         #bash <(curl -s https://codecov.io/bash) > /dev/null
    - name: Push doc
      if: contains( matrix.variant, '-doc-' )
      env:
        GIT_TOKEN: ${{ secrets.GIT_TOKEN_PLUMEDBOT }}
      run: |
         .ci/push doc
    - name: Compile and test pycv
      if: contains( matrix.variant, '-pycv-' )
      working-directory: ./plugins/pycv/
      run: |
            source ../../sourceme.sh
            ln -s $(realpath ../../regtest/scripts) ./regtest/scripts
            make check
